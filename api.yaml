swagger: '2.0'
info:
  description: REST API description of the ElasTest TORM Module.
  version: '0.1.1'
  title: ElasTest Torm REST API
  contact: {}
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:8091'
basePath: /
paths:
  /api/external/tjob:
    post:
      tags:
        - External
      summary: Create new TJob associated with an external Job
      description: 'The association is based on the name of the external Job received. The Project and the TJob that will be created will have the same name as the one received as a parameter. If a Project or Job already exists with the received name, a new one will not be created.'
      operationId: createExternalTJobUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: ExternalJob object that needs to create
          required: true
          schema:
            $ref: '#/definitions/ExternalJob'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ExternalJob'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/ExternalJob'
    put:
      tags:
        - External
      summary: Receives the completion signal of an External Job
      description: Sets the execution of TJob in the Completed state.
      operationId: finishExternalJobUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: ExternalJob configuration
          required: true
          schema:
            $ref: '#/definitions/ExternalJob'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Invalid input
  /api/project:
    get:
      tags:
        - Project
      summary: Returns all projects
      description: Returns the projects and the detailed information of each of them.
      operationId: getAllProjectsUsingGET
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Resources not found
    post:
      tags:
        - Project
      summary: Creates a new ElasTest Project
      description: 'Creates a new Project entity for a given name.This method, at least must receive as input a JSON with the following fields: name.'
      operationId: createProjectUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Object with the data of the project to be created.
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Project'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Invalid input
  '/api/project/{id}':
    get:
      tags:
        - Project
      summary: Returns the project found for a given ID
      description: Returns the project found for a given id and its detail.
      operationId: getProjectUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Project'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Invalid input
    delete:
      tags:
        - Project
      summary: Deletes a Project
      description: Deletes the project whose id matches for a given id.
      operationId: deleteProjectUsingDELETE
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: ID of Project to delete.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Deleteted successful
          schema:
            type: integer
            format: int64
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Project not found
          schema:
            type: integer
            format: int64
  /api/sut:
    get:
      tags:
        - SUT
      summary: List all SUT definitions
      description: Returns a list of all SUT definitions.
      operationId: getSutListUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SutSpecification'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: SUTs not found
    post:
      tags:
        - SUT
      summary: Creates a new SuT Description
      description: 'A SUT will be associated with a Project. This method, at least must receive as input a JSON with the following fields: name, imageName, project, specification'
      operationId: createSuTUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: body
          description: SuT configuration
          required: true
          schema:
            $ref: '#/definitions/SutSpecification'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SutSpecification'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Invalid input
    put:
      tags:
        - SUT
      summary: Updates an existing SUT Description
      description: Updates a SUT with the request body data.
      operationId: modifySutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: SuT configuration
          required: true
          schema:
            $ref: '#/definitions/SutSpecification'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SutSpecification'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/SutSpecification'
  '/api/sut/{sutId}':
    get:
      tags:
        - SUT
      summary: Returns a SUT
      description: Returns the SUT that matches for a given id.
      operationId: getSutByIdUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sutId
          in: path
          description: SuT id to return.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: SUT returned successfully
          schema:
            $ref: '#/definitions/SutSpecification'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - SUT
      summary: Deletes a SUT
      description: Deletes the SUT whose id matches with a given id.
      operationId: deleteSuTUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sutId
          in: path
          description: SuT id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: SUT deleteted successfully
          schema:
            type: integer
            format: int64
        '204':
          description: No Content
        '400':
          description: Invalid SUT ID supplied
          schema:
            type: integer
            format: int64
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: SUT not found
          schema:
            type: integer
            format: int64
  '/api/sut/{sutId}/exec':
    get:
      tags:
        - SUT Execution
      summary: List all SUT executions
      description: Returns a list of all SUT Executions for a given SUT.
      operationId: getAllSutExecBySutUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sutId
          in: path
          description: Sut id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SutExecution'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: SUTs not found
          schema:
            $ref: '#/definitions/SutExecution'
  '/api/sut/{sutId}/exec/{sutExecId}':
    get:
      tags:
        - SUT Execution
      summary: Returns a SUT Execution.
      description: Returns the SUT Execution whose id matches with a given id.
      operationId: getSutExecUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sutId
          in: path
          description: SuT id to get info
          required: true
          type: integer
          format: int64
        - name: sutExecId
          in: path
          description: SuT Execution id to get info
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SutExecution'
        '400':
          description: Invalid SUT ID supplied
          schema:
            $ref: '#/definitions/SutExecution'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: SUT not found
          schema:
            $ref: '#/definitions/SutExecution'
    delete:
      tags:
        - SUT Execution
      summary: Deletes a SUT execution
      description: Deteltes the SUT Execution whose id matches with a given id.
      operationId: deleteSuTExecUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: sutExecId
          in: path
          description: SuT execution id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: SUT Execution deleteted successfully
          schema:
            type: integer
            format: int64
        '204':
          description: No Content
        '400':
          description: Invalid SUT Execution ID supplied
          schema:
            type: integer
            format: int64
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: SUT Execution not found
          schema:
            type: integer
            format: int64
  /api/tjob:
    get:
      tags:
        - TJob
      summary: Returns all tjobs
      description: Returns all TJobs.
      operationId: getAllTJobsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TJob'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Resource not found
    post:
      tags:
        - TJob
      summary: Create a new TJob
      description: 'Creates a new TJob associated with an existing project. This method, at least must receive as input a JSON with the following fields: TJob name, imageName, external and project.'
      operationId: createTJobUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: TJob object that needs to create
          required: true
          schema:
            $ref: '#/definitions/TJob'
      responses:
        '200':
          description: Creation successful
          schema:
            $ref: '#/definitions/TJob'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Invalid input
    put:
      tags:
        - TJob
      summary: Modifies a existing TJob
      description: Modifies the TJob that matches the received TJob.
      operationId: modifyTJobUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Tjob object that needs to modify.
          required: true
          schema:
            $ref: '#/definitions/TJob'
      responses:
        '200':
          description: TJob Mofification Successful
          schema:
            $ref: '#/definitions/TJob'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Invalid input
          schema:
            $ref: '#/definitions/TJob'
  '/api/tjob/{tJobId}':
    get:
      tags:
        - TJob
      summary: Returns a TJob
      description: Returns the TJob identified by the received id with all its detailed data.
      operationId: getTJobByIdUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tJobId
          in: path
          description: ID of tJob to retrieve.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/TJob'
        '400':
          description: TJob not found.
          schema:
            $ref: '#/definitions/TJob'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - TJob
      summary: Deletes a TJob
      description: Deletes the TJob identified by the received id.
      operationId: deleteTJobUsingDELETE
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: tJobId
          in: path
          description: ID of TJob to delete.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Deleteted successful
          schema:
            type: integer
            format: int64
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: TJob not found
          schema:
            type: integer
            format: int64
  '/api/tjob/{tJobId}/exec':
    get:
      tags:
        - TJob Execution
      summary: Returns all TJob Executions of a TJob
      description: Returns all TJob Executions of a TJob.
      operationId: getTJobsExecutionsByTJobUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tJobId
          in: path
          description: TJob Id.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/TJobExecution'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: TJobs Executions not found
    post:
      tags:
        - TJob Execution
      summary: Executes a TJob
      description: Execute the TJob with the received id.
      operationId: execTJobUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tJobId
          in: path
          description: TJob Id.
          required: true
          type: integer
          format: int64
        - in: body
          name: parameters
          description: Parameters
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Parameter'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/TJobExecution'
        '201':
          description: Created
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: TJob not found
        '500':
          description: Server Error
  '/api/tjob/{tJobId}/exec/{tJobExecId}':
    get:
      tags:
        - TJob Execution
      summary: Returns a TJob Execution
      description: Returns the TJob Execution for a given id.
      operationId: getTJobsExecutionUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tJobId
          in: path
          description: TJob Id.
          required: true
          type: integer
          format: int64
        - name: tJobExecId
          in: path
          description: TJob Execution Id.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/TJobExecution'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: TJob Execution not found
    delete:
      tags:
        - TJob Execution
      summary: Deletes a TJob Execution
      description: Deletes the TJob Execution for a given id.
      operationId: deleteTJobExecutionUsingDELETE
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: tJobId
          in: path
          description: TJob Id.
          required: true
          type: integer
          format: int64
        - name: tJobExecId
          in: path
          description: TJob Execution Id.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation
          schema:
            type: integer
            format: int64
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: TJob Execution not found
          schema:
            type: integer
            format: int64
definitions:
  Project:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
        description: Id of the Project.
      name:
        type: string
        description: The project name.
      suts:
        type: array
        description: The Suts list associated with the project.
        items:
          $ref: '#/definitions/SutSpecification'
      tjobs:
        type: array
        description: The TJobs list associated with the project.
        items:
          $ref: '#/definitions/TJob'
    description: 'ElasTest organizes your work in projects, each of which will contain the different tests and SUTs that you want to create.'
  TestSuite:
    type: object
    properties:
      errors:
        type: integer
        format: int32
      failures:
        type: integer
        format: int32
      flakes:
        type: integer
        format: int32
      id:
        type: integer
        format: int64
      name:
        type: string
      numTests:
        type: integer
        format: int32
      skipped:
        type: integer
        format: int32
      tJobExec:
        $ref: '#/definitions/TJobExecution'
      testCases:
        type: array
        items:
          $ref: '#/definitions/TestCase'
      timeElapsed:
        type: number
        format: double
    description: Object that contains the information of a test suit results.
  TestCase:
    type: object
    properties:
      failureDetail:
        type: string
      failureErrorLine:
        type: string
      failureMessage:
        type: string
      failureType:
        type: string
      id:
        type: integer
        format: int64
      name:
        type: string
      testSuite:
        $ref: '#/definitions/TestSuite'
      time:
        type: number
        format: double
    description: Object that contains the information of the test results.
  SutExecution:
    type: object
    required:
      - url
    properties:
      deployStatus:
        type: string
        example: deploying
        description: 'Status of the SUT (deploying, deployed, undeploying, undeployed and error)'
        enum:
          - deploying
          - deployed
          - undeploying
          - undeployed
          - error
      id:
        type: integer
        format: int64
        example: 12345678
        description: Value that identifies a SUT Execution.
      sutSpecification:
        example: MySut
        description: SUT deployed
        $ref: '#/definitions/SutSpecification'
      url:
        type: string
        example: 'http://www.myapp.io:8090'
        description: URL to access the SUT.
    description: Data generated by the execution of a SUT.
  TJobExecution:
    type: object
    required:
      - duration
      - id
      - result
    properties:
      duration:
        type: integer
        format: int64
      error:
        type: string
      id:
        type: integer
        format: int64
      logIndex:
        type: string
      parameters:
        type: array
        items:
          $ref: '#/definitions/Parameter'
      result:
        type: string
        enum:
          - FINISHED
          - FAILURE
          - IN PROGRESS
      sutExecution:
        $ref: '#/definitions/SutExecution'
      tJob:
        $ref: '#/definitions/TJob'
      testSuite:
        $ref: '#/definitions/TestSuite'
      tjob:
        $ref: '#/definitions/TJob'
    description: Data generated by the execution of a TJob.
  Parameter:
    type: object
    properties:
      name:
        type: string
        example: ELASTEST_HOME
        description: Name of the Environment Variable.
      value:
        type: string
        example: /bin/elastest
        description: Value of the Environment Variable.
    description: Environment Variable to pass to a docker container.
  SutSpecification:
    type: object
    required:
      - imageName
      - name
      - project
      - specification
    properties:
      description:
        type: string
        example: My Web Application
        description: Brief description of a SUT
      id:
        type: integer
        format: int64
        description: Value that identifies the SUT Specification.
      imageName:
        type: string
        example: elastest/elastest-torm
        description: Name of the Docker Image that conteins the SUT (not necessary if the Specification field is filled).
      name:
        type: string
        example: sut definition 1
        description: Name of the SUT.
      project:
        example: '{ id:"1" }'
        description: Project to which the SUT is associated
        $ref: '#/definitions/Project'
      specification:
        type: string
        example: 'https://github.com/elastest/elastest-torm.git'
        description: URL of the GitHub repository where the SUT code is stored (not necessary if the ImageName field is filled)
      sutExecution:
        type: array
        description: List of the SUT Executions of a SUT
        items:
          $ref: '#/definitions/SutExecution'
      tjobs:
        type: array
        description: List of TJobs associated to a SUT Specification
        items:
          $ref: '#/definitions/TJob'
    description: SUT definition.
  ExternalJob:
    type: object
    required:
      - jobName
    properties:
      analyzerUrl:
        type: string
        example: 'http://localhost:4200#/logmanager?indexName=8'
        description: URL to acces to Log Analyzer in ElasTest.
      executionUrl:
        type: string
        example: 'http://192.168.99.100:8091/#/projects/2/tjob/8'
        description: URL to acces to TJob execution in ElasTest.
      jobName:
        type: string
        example: job1
        description: Job name on any external system.
      logstashPort:
        type: string
        example: '9200'
        description: Port where the Logstash service is listening.
      servicesIp:
        type: string
        example: 192.168.99.100
        description: IP where ElasTest services are located.
      tJobExecId:
        type: integer
        format: int64
        example: 0
        description: Id of the TJobExecution created.
    description: Object that contains the exchange information between Jenkins and ElasTest.
  TJob:
    type: object
    required:
      - external
      - imageName
      - name
      - project
    properties:
      commands:
        type: string
        description: Commands to execute inside a Docker Container
      execDashboardConfig:
        type: string
      execDashboardConfigPath:
        type: string
      external:
        type: boolean
        example: false
        description: Boolean variable that indicates whether a TJob is really an external Job
      id:
        type: integer
        format: int64
        example: 1
        description: Identifies a TJob.
      imageName:
        type: string
        example: edujgurjc/torm-test-01
        description: Name of the docker image that contains the test.
      name:
        type: string
        example: myFirstTJob
        description: The name of the TJob.
      parameters:
        type: array
        description: List of parameters to pass to a docker container as an environment variables
        items:
          $ref: '#/definitions/Parameter'
      project:
        example: '{ id:"1" }'
        description: Project to which the TJob is associated.
        $ref: '#/definitions/Project'
      resultsPath:
        type: string
      sut:
        example: '{ id:"1" }'
        description: The SUT associated with the TJob.
        $ref: '#/definitions/SutSpecification'
      tjobExecs:
        type: array
        description: List of TJob Executions of a TJob
        items:
          $ref: '#/definitions/TJobExecution'
    description: Entity that represents the test to run against a SUT.
