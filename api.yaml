swagger: "2.0"
info:
  description: "REST API description of the ElasTest TORM Module."
  version: "1.0.0"
  title: "ElasTest Torm REST API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/v2"
tags:
- name: "testmanagement"
  description: "Test Management"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "testorchestration"
  description: "Test Orchestation"
schemes:
- "http"
paths:
  /tjob:
    post:
      tags:
      - "tjob"
      summary: "Create a new tjob."
      description: "Creates a new tjob with the received information."
      operationId: "createTJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tjob object that needs to create"
        required: true
        schema:
          $ref: "#/definitions/TJob"
      responses:
        200: 
          description: "TJob Creation OK"
          schema:
            $ref: "#/definitions/TJob"
        405:
          description: "Invalid input"
    put:
      tags:
      - "tjob"
      summary: "Modifies a existing tjob."
      description: "Modifies a existing tjob received as a parameter."
      operationId: "modifyTJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tjob object that needs to modify."
        required: true
        schema:
          $ref: "#/definitions/TJob"
      responses:
        200: 
          description: "TJob Mofification OK"
          schema:
            $ref: "#/definitions/TJob"
        405:
          description: "Invalid input"
    get:
      tags:
      - "tjob"
      summary: "Returns all tjobs."
      description: "Returns all tjobs for a user loged."
      operationId: "getAllTJobs"
      consumes:
      - "application/json"
      responses:
        200: 
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TJob"
        404:
          description: "Resource not found"
  /tjob/{tJobId}:
    get:
      tags:
      - "tjob"
      summary: "Returns a TJob."
      description: "Returns the TJob for a fiven TJobId. Returns its detail information."
      operationId: "getTJobById"
      produces:
      - "application/json"
      parameters:
      - name: "tJobId"
        in: "path"
        description: "ID of tJob to retrieve."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TJob"
        400:
          description: "TJob not found."
    delete:
      tags:
      - "tjob"
      summary: "Deletes a TJob." 
      description: "Delete the TJob that matches with a given a tJobId." 
      operationId: "deleteTJob"
      parameters:
      - name: "tJobId"
        in: "path"
        description: "ID of tJob to delete."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Deleteted successful"
          schema:
            type: "integer"
            format: "int64"
        404:
          description: "TJob not found"
  /tjob/{tJobId}/exec:
    get:
      tags:
      - "tjob execution"
      summary: "Returns all TJob Executions of a Tjob." 
      description: "Returns all TJob Executions of a Tjob."
      operationId: "getTJobsExecutionsByTJob"
      produces:
      - "application/json"
      parameters:
      - name: "tJobId"
        in: "path"
        description: "TJob Id."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TJobExecution"
        404:
          description: "TJobs Executions not found"
    post:
      tags:
      - "tjob execution"
      summary: "Executes a TJob."
      description: "Runs the TJob for a give tJobId and returns a Tjob Execution Id."
      operationId: "execTJob"
      produces:
      - "application/json"
      parameters:
      - name: "tJobId"
        in: "path"
        description: "TJob Id."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "integer"
            format: "int64"
        400:
          description: "Invalid ID supplied"
        404:
          description: "TJob not found"
  /tjob/{tJobId}/exec/{tJobExecId}:
    get:
      tags:
      - "tjob execution"
      summary: "Returns a TJob Execution." 
      description: "Returns the TJob Execution for a fiven id."
      operationId: "getTJobsExecution"
      produces:
      - "application/json"
      parameters:
      - name: "tJobId"
        in: "path"
        description: "TJob Id."
        required: true
        type: "integer"
        format: "int64"
      - name: "tJobExecId"
        in: "path"
        description: "TJob Execution Id."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TJobExecution"
        404:
          description: "TJob Execution not found"
    delete:
      tags:
      - "tjob execution"
      summary: "Deletes a TJob Execution."
      description: "Deletes the TJob Execution for a given id. Returns the id."
      operationId: "deleteTJobExecution"
      parameters:
      - name: "tJobId"
        in: "path"
        description: "TJob Id."
        required: true
        type: "integer"
        format: "int64"
      - name: "tJobExecId"
        in: "path"
        description: "TJob Execution Id."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "integer"
            format: "int64"
        404:
          description: "TJob Execution not found"
  /tojob:
    get:
      tags:
      - "tojob"
      summary: "Finds and returns all TOJobs."
      description: "Returns all TOJobs for a logged user."
      operationId: "getTOJobs"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TOJob"
        404:
          description: "TOJobs not found"
    post:
      tags:
      - "tojob"
      summary: "Creates a new TOJob."
      description: "Creates new TOJob with the received description."
      operationId: "createTOJob"
      parameters:
      - in: "body"
        name: "body"
        description: "TOJjob's desctiption."
        required: true
        schema:
          $ref: "#/definitions/TOJob"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TOJob"
  /tojob/{tOJobId}:
    get:
      tags:
      - "tojob"
      summary: "Returns a TOJob."
      description: "Returns the TOJob that maches with the given TOJobId."
      operationId: "getTOJobById"
      produces:
      - "application/json"
      parameters:
      - name: "tOJobId"
        in: "path"
        description: "ID of TOJob to return."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TOJob"
        404:
          description: "TOJob not found"
    put:
      tags:
      - "tojob"
      summary: "Updates the description of a TOJob."
      description: "Updates the description of a TOJob."
      operationId: "modifyTOJob"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "tOJobId"
        in: "path"
        description: "Id of TJob that needs to be update."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "TOJob object that needs to be updated."
        required: true
        schema:
          $ref: "#/definitions/TOJob"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TOJob"
        404:
          description: "TOJob not exists"
    delete:
      tags:
      - "tojob"
      summary: "Deletes a TOJob."
      description: "Deletes the TOJob that maches with a given TOJobId."
      operationId: "deleteTOJob"
      parameters:
      - name: "tOJobId"
        in: "path"
        description: "ID of TOJob to delete."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "integer"
            format: "int64"
        404:
          description: "TOJob not exists"
  /tojob/{tOJobId}/exec:
    get:
      tags:
      - "tojob execution"
      summary: "Returns all executions."
      description: "Returns all executions of a TOJobId passed as parameter." 
      operationId: "getAllTOJobExecution"
      produces:
      - "application/json"
      parameters:
      - name: "tOJobId"
        in: "path"
        description: "ID of TOJob execution to return."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TOJobExecution"
        404:
          description: "TOJob Executions not found"
  /tojob/{tOJobId}/exec/{tOJobExecId}:
    get:
      tags:
      - "tojob execution"
      summary: "Returns a TOJobExecution."
      description: "Returns the TOJobExecution for a given TOJobExecId. "
      operationId: "getTOJobExecById"
      produces:
      - "application/json"
      parameters:
      - name: "tOJobId"
        in: "path"
        description: "ID of TOJob to return."
        required: true
        type: "integer"
        format: "int64"
      - name: "tOJobExecId"
        in: "path"
        description: "ID of TOJob Execution to return."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TOJobExecution"
        404:
          description: "TOJob Execution not found"
    delete:
      tags:
      - "tojob"
      summary: "Deletes a TOJobs Execution."
      description: "Deletes a TOJobs Execution for a given TOJobExecId."
      operationId: "deleteTOJobExec"
      parameters:
      - name: "tOJobId"
        in: "path"
        description: "ID of TOJob to return."
        required: true
        type: "integer"
        format: "int64"
      - name: "tOJobExecId"
        in: "path"
        description: "ID of TOJob Execution to return."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "integer"
            format: "int64"
        404:
          description: "TOJob Execution not found"
  /sut:
    post:
      tags:
      - "sut"
      summary: "Create SuT Description"
      description: ""
      operationId: "createSuT"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "SuT configuration"
        required: true
        schema:
          $ref: '#/definitions/SutSpecification'
      responses:
        200:
          description: "OK"
        405:
          description: "Invalid input"          
    put:
      tags:
      - "sut"
      summary: "Updates an existing SuT Description"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "SuT configuration"
        required: true
        schema:
          $ref: '#/definitions/SutSpecification'
      responses:
        200:
          description: "OK"
        405:
          description: "Invalid input"          
  /sut/{sutId}:
    delete:
      tags:
      - "sut"
      summary: "Deletes a SuT"
      description: ""
      operationId: "deleteSuT"
      produces:
      - "application/json"
      parameters:
      - name: "sutId"
        in: "path"
        description: "SuT id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "SuT deleteted successfully"
        400:
          description: "Invalid SuT ID supplied"
        404:
          description: "SuT not found"    
  /sut/{sutId}/deploy:
    post:
      tags:
      - "sut"
      summary: "Deploys a SuT"
      description: ""
      operationId: "deploySuT"
      produces:
      - "application/json"
      parameters:
      - name: "sutId"
        in: "path"
        description: "SuT id to deploy"
        required: true
        type: "integer"
        format: "int64"
      - name: "deployConfig"
        in: "body"
        description: "Configuration for deploy"
        required: true
        schema:
          $ref: "#/definitions/DeployConfig"
      responses:
        200:
          description: "SuT has been deployed successfully"
          schema:
            $ref: "#/definitions/SuTExecution/properties/id"
        400:
          description: "Invalid SuT ID supplied"
        404:
          description: "SuT not found"    
  /sut/{sutId}/undeploy/{sutExecId}:
    post:
      tags:
      - "sut"
      summary: "Undeploys a SuT"
      description: ""
      operationId: "undeploySuT"
      produces:
      - "application/json"
      parameters:
      - name: "sutId"
        in: "path"
        description: "SuT id to undeploy"
        required: true
        type: "integer"
        format: "int64"
      - name: "sutExecId"
        in: "path"
        description: "SuT Execution id to deploy"
        required: true
        type: "integer"
        format: "int64"        
      responses:
        400:
          description: "Invalid SuT ID supplied"
        404:
          description: "SuT not found"    
  /sut/{sutId}/exec/{sutExecId}:
    get:
      tags:
      - "sut"
      summary: "Returns a SuT Execution information"
      description: ""
      operationId: "SuTExecInfo"
      produces:
      - "application/json"
      parameters:
      - name: "sutId"
        in: "path"
        description: "SuT id to undeploy"
        required: true
        type: "integer"
        format: "int64"
      - name: "sutExecId"
        in: "path"
        description: "SuT Execution id to deploy"
        required: true
        type: "integer"
        format: "int64"        
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SuTExecution"
        400:
          description: "Invalid SuT ID supplied"
        404:
          description: "SuT not found"             
  /sut/{sutId}/status/{sutExecId}:
    get:
      tags:
      - "sut"
      summary: "Returns a SuT status"
      description: ""
      operationId: "SuTStatus"
      produces:
      - "application/json"
      parameters:
      - name: "sutId"
        in: "path"
        description: "SuT id to return status"
        required: true
        type: "integer"
        format: "int64"
      - name: "sutExecId"
        in: "path"
        description: "SuT Execution id to deploy"
        required: true
        type: "integer"
        format: "int64"        
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "string"
            enum:
            - "Starting"
            - "Ready"
            - "Finished"
        400:
          description: "Invalid SuT ID supplied"
        404:
          description: "SuT not found"              
  /sut/{sutId}/logs/{sutExecId}:
    get:
      tags:
      - "sut"
      summary: "Returns a SuT logs"
      description: ""
      operationId: "SuTLogs"
      produces:
      - "application/json"
      parameters:
      - name: "sutId"
        in: "path"
        description: "SuT id to return logs"
        required: true
        type: "integer"
        format: "int64"
      - name: "sutExecId"
        in: "path"
        description: "SuT Execution id to deploy"
        required: true
        type: "integer"
        format: "int64"           
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SuTExecution/properties/logs"   
        400:
          description: "Invalid SuT ID supplied"
        404:
          description: "SuT not found"              
  /sut/{sutId}/monitoring/{sutExecId}:
    get:
      tags:
      - "sut"
      summary: "Returns a SuT monitoring info"
      description: ""
      operationId: "SuTMonitoring"
      produces:
      - "application/json"
      parameters:
      - name: "sutId"
        in: "path"
        description: "SuT id to return monitoring information"
        required: true
        type: "integer"
        format: "int64"
      - name: "sutExecId"
        in: "path"
        description: "SuT Execution id to deploy"
        required: true
        type: "integer"
        format: "int64"           
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SuTMonitoring"   
        400:
          description: "Invalid SuT ID supplied"
        404:
          description: "SuT not found"
definitions:
  TJob:
    type: "object"
    required:
    - "name"
    - "testServices"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: "12345678"
      name:
        type: "string"
        example: "testApp1"
      testServices:
        $ref: "#/definitions/TestServices"
      imageName:
        type: "string"
        example: "testapp1"
      sut:
        type: "integer"
        example: "12345678"
  TestServices:
    type: "array"
    items:
      $ref: "#/definitions/TestService"
  TestService:
    type: "object"
    properties:
      serviceType: 
        type: "string"
        example: "userEmulator"
      name:
        type: "string"
        example:  "chrome"
      version:
        type: "integer"
        format: "int64"
  TJobExecution:
    type: "object"
    required:
    - "id"
    - "result"
    - "duration"
    properties:
      id:
        type: "integer"
        format: "int64"
      duration:
        type: "integer"
        format: "int64"
      result: 
        type: "string"
        enum:
        - "SUCCESS"
        - "FAILURE"
        - "IN PROGRESS"
      sutExecution:
        type: "integer"
        format: "int64" 
      error:
        type: "string"
      logs:
        description: "URLs of logs"
        type: "array"
        items:
          $ref: "#/definitions/Log"
  Log:
    type: "object"
    required:
    - "logType"
    - "logUrl"
    properties:
      logType:
        type: "string"
        enum:
        - "BrowserLog"
        - "TestLog"
      logUrl:
        type: "string"
  TOJob:
    type: "object"
    required:
    - "name"
    - "tOScript"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      tOScript:
        type: "string"
        example: "tjob1 {sut1, browser}, tjob2 {sut1, browser}, tjob3 {sut2, browser2}"
  TOJobExecution:
    type: "object"
    required:
    - "id"
    - "status"
    properties:
      id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        enum:
        - "SUCCESS"
        - "FAILURE"
        - "IN PROGRESS"
      tJobsExecutions:
        type: "array"
        items:
          $ref: "#/definitions/TJobExecution"
  SutSpecification:
    type: "object"
    required:
    - "name"
    - "specification"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "sut definition 1"
      specification:
        type: "string"
        example: ""
      desc:
        type: "string"
        example: "This is a SuT description example"
      deployedSut:
        type: "array"
        items: 
          $ref: '#/definitions/DeployedSut'
  DeployedSut:
    type: "object"
    required:
    - "url"
    properties:
      url:
        type: "string"
      sshKey:
        type: "string"
  DeployConfig:
    type: "object"
    properties:
      Shell script:
        type: "string"
      AWS CloudFormation:
        type: "string"
  SuTExecution:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: "12345678"
      logs:
        type: "array"
        items:
          type: "string"
          example: ["example/path/to/logs.log"]
      monitoringCurrent:
        $ref: "#/definitions/SuTMonitoring"          
      monitoringSummary:
        $ref: "#/definitions/SuTMonitoringSummary"
      deployStatus:
        type: "string"
        enum:
        - "deployed"
        - "undeployed"
  SuTMonitoring:
    type: "object"
    properties:
      CPU:
        type: "string"
        example: "56%"
      CPU temp:
        type: "string"
        example: "66ºC"
      CPU cores:
        type: "string"
        example: "4"
      CPU speed:
        type: "string"
        example: "3.1 GHz"
  SuTMonitoringSummary:
    type: "object"
    properties:
      CPU Average:
        type: "string"
        example: "71%"
      CPU temp Average:
        type: "string"
        example: "71ºC"
      CPU cores:
        type: "string"
        example: "4"
      CPU speed:
        type: "string"
        example: "3.1 GHz"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
